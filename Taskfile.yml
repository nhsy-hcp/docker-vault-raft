# https://taskfile.dev
version: '3'

dotenv:
  - .env

vars:
  CA_DIR: certs/ca
  CERT_VALIDITY_DAYS: 365
  CA_VALIDITY_DAYS: 3650
  COMPOSE_PROJECT_NAME:
    sh: basename $(pwd)

tasks:
  default:
    aliases: ["all"]
    desc: start cluster and unseal
    cmds:
      - task: up
      - task: vault:unseal

  # certificate management
  certs:init:
    desc: create certificate directory structure
    cmds:
      - bash scripts/certs/init.sh

  certs:ca:
    desc: generate root ca
    cmds:
      - bash scripts/certs/generate-ca.sh
    deps: [certs:init]

  certs:server:
    desc: generate all server certificates
    cmds:
      - bash scripts/certs/generate-server.sh
    deps: [certs:ca]

  certs:verify:
    desc: verify certificates
    cmds:
      - bash scripts/certs/verify.sh

  certs:renew:
    desc: renew expiring certificates
    cmds:
      - bash scripts/certs/renew.sh

  # configuration management
  config:certs:
    desc: generate all certificates (ca + servers)
    cmds:
      - task: certs:ca
      - task: certs:server
      - task: certs:verify

  config:raft:
    desc: generate vault raft configuration files from template
    cmds:
      - bash scripts/config/generate-raft.sh
    preconditions:
      - test -f templates/raft.tpl.hcl

  # setup
  config:all:
    desc: complete initial setup (certificates + configuration)
    cmds:
      - task: config:certs
      - task: config:raft

  # cluster management
  up:
    desc: start the cluster
    preconditions:
      - test -f .env
      - test -f docker-compose.yml
      - sh: test -f certs/ca/ca.crt
        msg: "certificates not found. run: task config:certs"
    cmds:
      - docker compose up -d --pull=missing
      - echo ""
      - echo "Waiting 20 seconds for startup..."
      - echo ""
      - sleep 20
      - |
        echo "health checks:"
        # check vault-1
        if curl -sf --cacert certs/ca/ca.crt https://localhost:8201 > /dev/null 2>&1; then
          echo "  ✓ vault-1 (https://localhost:8201)"
        else
          echo "  ✗ vault-1 (https://localhost:8201) - not responding"
        fi
        # check vault-2
        if curl -sf --cacert certs/ca/ca.crt https://localhost:8202 > /dev/null 2>&1; then
          echo "  ✓ vault-2 (https://localhost:8202)"
        else
          echo "  ✗ vault-2 (https://localhost:8202) - not responding"
        fi
        # check vault-3
        if curl -sf --cacert certs/ca/ca.crt https://localhost:8203 > /dev/null 2>&1; then
          echo "  ✓ vault-3 (https://localhost:8203)"
        else
          echo "  ✗ vault-3 (https://localhost:8203) - not responding"
        fi
        # check haproxy
        if curl -sf http://localhost:8080/stats > /dev/null 2>&1; then
          echo "  ✓ haproxy (https://localhost:8080)"
        else
          echo "  ✗ haproxy (https://localhost:8080) - not responding"
        fi
        echo ""
    silent: true

  down:
    desc: stop the cluster
    cmds:
      - docker compose down

  restart:
    desc: restart the cluster
    cmds:
      - docker compose restart
      - sleep 10
      - task: vault:unseal
      - task: vault:raft

  stop:
    desc: stop the cluster (without removing)
    cmds:
      - docker compose stop

  clean:
    desc: clean up containers and volumes
    aliases: ["rm"]
    cmds:
      - docker compose down -v
    ignore_error: true

  clean:all:
    desc: clean up everything including certificates
    cmds:
      - docker compose down -v
      - rm -rf certs/*/
      - rm -f vault-init.json
    ignore_error: true

  # vault operations
  vault:init:
    desc: initialize vault
    cmds:
      - bash scripts/vault/init.sh

  vault:config:
    desc: configure vault settings (audit, quotas, token ttls)
    cmds:
      - bash scripts/vault/config.sh

  vault:unseal:
    desc: unseal all vault nodes
    cmds:
      - bash scripts/vault/unseal.sh

  vault:status:
    desc: check status of all nodes
    cmds:
      - bash scripts/vault/status.sh

  vault:raft:
    desc: show raft peer status
    cmds:
      - bash scripts/vault/raft-peers.sh

  vault:all:
    desc: complete vault setup (start, init, unseal, configure)
    deps: ["up"]
    cmds:
      - task: vault:init
      - task: vault:unseal
      - task: vault:config
      - task: vault:raft

  # snapshot management
  snapshot:backup:
    aliases: ["backup"]
    desc: create raft snapshot backup
    cmds:
      - vault operator raft snapshot save snapshots/backup-`date +"%Y%m%d-%H%M"`.snap
      - echo "snapshot saved to snapshots/backup-`date +\"%Y%m%d-%H%M\"`.snap"

  snapshot:inspect:
    desc: inspect snapshot with default depth (depth=2)
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          echo "usage: task snapshot:inspect -- <snapshot-file>"
          exit 1
        fi
        vault operator raft snapshot inspect -format=json {{.CLI_ARGS}}

  snapshot:inspect:detailed:
    desc: inspect snapshot with full detail (depth=0, all keys)
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          echo "usage: task snapshot:inspect:detailed -- <snapshot-file>"
          exit 1
        fi
        vault operator raft snapshot inspect -depth=0 -format=json {{.CLI_ARGS}}

  snapshot:convert:
    desc: convert snapshot to json (depth=2, default aggregation)
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          echo "usage: task snapshot:convert -- <snapshot-file>"
          exit 1
        fi
        vault operator raft snapshot inspect -format=json {{.CLI_ARGS}} > {{.CLI_ARGS}}.json
        echo "converted {{.CLI_ARGS}} to {{.CLI_ARGS}}.json"

  snapshot:convert:detailed:
    desc: convert snapshot to json with full detail (depth=0, all keys)
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          echo "usage: task snapshot:convert:detailed -- <snapshot-file>"
          exit 1
        fi
        vault operator raft snapshot inspect -depth=0 -format=json {{.CLI_ARGS}} > {{.CLI_ARGS}}.detailed.json
        echo "converted {{.CLI_ARGS}} to {{.CLI_ARGS}}.detailed.json"

  snapshot:analyze:
    desc: analyze snapshot json file
    cmds:
      - python3 scripts/load/analyse.py {{.CLI_ARGS}}

  snapshot:all:
    desc: create snapshot with default depth (depth=2)
    cmds:
      - mkdir -p snapshots
      - |
        SNAPSHOT_FILE="snapshots/backup-`date +"%Y%m%d-%H%M"`.snap"
        echo "creating snapshot: $SNAPSHOT_FILE"
        vault operator raft snapshot save "$SNAPSHOT_FILE"
        echo ""
        echo "inspecting with default depth (depth=2)..."
        vault operator raft snapshot inspect -format=json "$SNAPSHOT_FILE" > "$SNAPSHOT_FILE.json"
        echo "created: $SNAPSHOT_FILE.json"
        echo ""
        echo "snapshot summary:"
        vault operator raft snapshot inspect "$SNAPSHOT_FILE"

  snapshot:all:detailed:
    desc: create snapshot with full detail (depth=0, all keys)
    cmds:
      - mkdir -p snapshots
      - |
        SNAPSHOT_FILE="snapshots/backup-`date +"%Y%m%d-%H%M"`.snap"
        echo "creating snapshot: $SNAPSHOT_FILE"
        vault operator raft snapshot save "$SNAPSHOT_FILE"
        echo ""
        echo "inspecting with full detail (depth=0)..."
        vault operator raft snapshot inspect -depth=0 -format=json "$SNAPSHOT_FILE" > "$SNAPSHOT_FILE.detailed.json"
        echo "created: $SNAPSHOT_FILE.detailed.json"
        echo ""
        echo "snapshot summary:"
        vault operator raft snapshot inspect "$SNAPSHOT_FILE"
        echo ""
        echo "note: detailed json file may be very large"

  # monitoring and logs
  logs:
    desc: view logs
    cmds:
      - docker compose logs -f --tail=1000 {{.CLI_ARGS}}

  logs:vault:
    desc: view vault logs only
    cmds:
      - docker compose logs -f --tail=1000 vault-1 vault-2 vault-3

  logs:haproxy:
    desc: view haproxy logs only
    cmds:
      - docker compose logs -f --tail=1000 haproxy

  health:
    desc: health check via haproxy
    cmds:
      - curl --cacert certs/ca/ca.crt https://localhost:8200/v1/sys/health

  metrics:
    desc: fetch prometheus metrics
    cmds:
      - |
        curl -s --cacert certs/ca/ca.crt \
          --header "X-Vault-Token: $VAULT_TOKEN" \
          "https://localhost:8201/v1/sys/metrics?format=prometheus"

  # testing
  test:tls:
    desc: test tls connections
    cmds:
      - bash scripts/test/tls.sh

  test:cluster:
    desc: test cluster formation
    cmds:
      - bash scripts/test/cluster.sh

  test:failover:
    desc: test failover
    cmds:
      - bash scripts/test/failover.sh

  test:all:
    desc: run all tests
    cmds:
      - task: test:tls
      - task: test:cluster
      - task: test:failover

  # utilities
  ui:
    desc: open vault ui and haproxy stats in browser
    cmds:
      - open https://localhost:8200
      - open http://localhost:8080/stats
      - task: vault:token
  pull:
    desc: pull latest images
    cmds:
      - docker compose pull
    silent: true

  data:df:
    desc: check disk usage in containers
    cmds:
      - docker compose exec vault-1 df -h
      - docker compose exec vault-2 df -h
      - docker compose exec vault-3 df -h

  data:ls:
    desc: list vault data directory contents for all nodes
    cmds:
      - |
        echo "=== vault-1 ==="
        docker compose exec vault-1 ls -lah /vault/file
        echo ""
      - |
        echo "=== vault-2 ==="
        docker compose exec vault-2 ls -lah /vault/file
        echo ""
      - |
        echo "=== vault-3 ==="
        docker compose exec vault-3 ls -lah /vault/file
        echo ""
    silent: true

  data:destroy:
    desc: stop vault container, delete raft folder and vault.db from volume
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          echo "Error: Vault node name required"
          echo "Usage: task data:destroy -- <vault-node>"
          echo "Example: task data:destroy -- vault-3"
          exit 1
        fi

        NODE="{{.CLI_ARGS}}"
        PROJECT="{{.COMPOSE_PROJECT_NAME}}"
        VOLUME_NAME="${PROJECT}_${NODE}-data"

        echo "=== Stopping container: $NODE ==="
        docker compose stop $NODE
        echo "Container $NODE stopped"

        echo ""
        echo "=== Inspecting volume before deletion: $VOLUME_NAME ==="
        docker run --rm \
          -v $VOLUME_NAME:/data:ro \
          busybox ls -lah /data

        echo ""
        echo "=== Deleting raft folder and vault.db ==="
        docker run --rm \
          -v $VOLUME_NAME:/data \
          busybox sh -c "rm -rf /data/raft /data/vault.db"
        echo "Deleted: /data/raft"
        echo "Deleted: /data/vault.db"

        echo ""
        echo "=== Inspecting volume after deletion: $VOLUME_NAME ==="
        docker run --rm \
          -v $VOLUME_NAME:/data:ro \
          busybox ls -lah /data

        echo ""
        echo "Data destruction complete"
        echo "To restart with fresh data: docker compose start $NODE"
        echo "Note: You will need to re-initialize and unseal vault after restart"

  benchmark:
    desc: run vault benchmark
    cmds:
      - vault namespace create vault-benchmark || true
      - vault-benchmark run -config=./benchmark/config.hcl

  loadtest:all:
    cmds:
      - vault status
      - vault namespace create loadtest || echo loadtest namespace already exists
      - ./scripts/load/generate_namespaces.py
      - ./scripts/load/generate_leases.py

  shell:
    desc: shell into a container
    cmds:
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          echo "Error: Vault node name required"
          echo "Usage: task shell -- <vault-node>"
          echo "Example: task shell -- vault-1"
          exit 1
        fi
        NODE="{{.CLI_ARGS}}"
        docker compose exec $NODE /bin/sh
    silent: true

  vault:token:
    cmds:
      - |
        # copy vault token to clipboard on macos if available
        if [ "$(uname)" = "Darwin" ] && [ -n "$VAULT_TOKEN" ]; then
          echo "$VAULT_TOKEN" | pbcopy
          echo "root token copied to clipboard"
        elif [ "$(uname)" = "Darwin" ] && [ -z "$VAULT_TOKEN" ]; then
          echo "note: VAULT_TOKEN not set (run 'task vault:init' first)"
        fi
    silent: true